[{"C:\\projects\\portfolio-react-shopping-cart\\src\\App.js":"1","C:\\projects\\portfolio-react-shopping-cart\\src\\index.js":"2","C:\\projects\\portfolio-react-shopping-cart\\src\\components\\ProductComponent.js":"3","C:\\projects\\portfolio-react-shopping-cart\\src\\util.js":"4","C:\\projects\\portfolio-react-shopping-cart\\src\\components\\FilterComponent.js":"5","C:\\projects\\portfolio-react-shopping-cart\\src\\components\\CartComponent.js":"6"},{"size":4884,"mtime":1607369414628,"results":"7","hashOfConfig":"8"},{"size":267,"mtime":1606950657545,"results":"9","hashOfConfig":"8"},{"size":1460,"mtime":1607299876755,"results":"10","hashOfConfig":"8"},{"size":102,"mtime":1607030138959,"results":"11","hashOfConfig":"8"},{"size":1239,"mtime":1607368634313,"results":"12","hashOfConfig":"8"},{"size":2175,"mtime":1607369014576,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},"5qr8yt",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\projects\\portfolio-react-shopping-cart\\src\\App.js",["28"],"import React from 'react'; \nimport ProductComponent from './components/ProductComponent';\nimport FilterComponent from './components/FilterComponent';\nimport CartComponent from './components/CartComponent';\nimport data from './data.json'; \n\nclass App extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            products: data.products,\n            productStyle: '',\n            productSort: '',\n            cartItems: []\n        }\n    }\n\n    sortProducts = (event) => {\n        const productSort = event.target.value;\n        console.log(event.target.value); \n        this.setState((state) => ({\n            productSort: productSort,\n            products: this.state.products.slice().sort((a, b) => { \n                if (productSort === 'lowest') { \n                    if (a.price >= b.price) { \n                        return 1; \n                    } else {\n                        return -1; \n                    }\n                } else if (productSort === 'highest') {\n                    if (a.price <= b.price) {\n                        return 1;\n                    } else {\n                        return -1;\n                    }\n                } else {\n                    return state; \n                }\n            })\n        }));\n    };\n\n    filterProducts = (event) => {\n        console.log(event.target.value); \n        if(event.target.value === '') {\n            this.setState({productStyle: event.target.value, products: data.products}); \n        } else {\n            this.setState({\n                productStyle: event.target.value,\n                products: data.products.filter(product => (product.productStyle.indexOf(event.target.value) >= 0))\n            })\n        }\n    };\n\n   addToCart = (product) => {\n       const cartItems = this.state.cartItems.slice(); \n       let alreadyInCart = false;  \n       cartItems.forEach((item) => {\n            if (item._id === product._id) {\n                console.log(cartItems);\n                item.count++; \n                alreadyInCart = true;\n            }\n        });\n        if (!alreadyInCart) {\n            console.log(cartItems); \n            cartItems.push({...product, count: 1}); \n        }\n        this.setState({cartItems})\n    }\n\n    // below function is just a simple pop of the last item added currently, just a placeholder, will update function to only remove when product ids match\n\n    removeFromCart = (product) => {\n        const cartItems = this.state.cartItems.slice();  \n        let alreadyInCart = true;\n        cartItems.forEach((item) => {\n             if (item._id === product._id) {\n                 console.log(cartItems);\n                 item.count = 0; \n                 alreadyInCart = false;\n                 cartItems.pop();\n             }\n         });\n         this.setState({cartItems})\n    }\n\n    render() {\n        return (\n            <div className='container-fluid'>\n                <header>\n                    <h2><a href='/'>Christmas Decor Online Store</a></h2>\n                </header>\n                <main>\n                    <div className='container'>\n                        <div className='row'>\n                            <div className='col-md-6 filter-section'>\n                                <FilterComponent \n                                    count={this.state.products.length} \n                                    productStyle={this.state.productStyle} \n                                    productSort={this.state.productSort}\n                                    sortProducts={this.sortProducts}\n                                    filterProducts={this.filterProducts}\n                                /> \n                            </div>\n                            <div className='col-md-6 cart-style' style={{color: 'white'}}>\n                                <CartComponent \n                                    cartItems={this.state.cartItems}\n                                    removeFromCart={this.removeFromCart}\n                                />\n                            </div>\n                            <div className='col-12 main'>\n                                <ProductComponent \n                                    products={this.state.products} \n                                    addToCart={this.addToCart}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                </main>\n                <footer>\n                    <div className='container-fluid'>\n                        <div className='row'>\n                            <div className='col-8 footer-copyright'>\n                                Â© 2020, Calli Oberembt\n                            </div>\n                        </div>\n                    </div>\n                </footer>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","C:\\projects\\portfolio-react-shopping-cart\\src\\index.js",[],"C:\\projects\\portfolio-react-shopping-cart\\src\\components\\ProductComponent.js",["29"],"import React, { Component } from 'react';\r\nimport { Button, Card, CardBody, CardHeader, CardImg, CardFooter } from 'reactstrap';\r\nimport formatCurrency from '../util'; \r\n\r\nexport default class ProductComponent extends Component {\r\n    render() {\r\n        const productList = this.props.products.map(product => {\r\n            return (\r\n                <div key={product._id} className='col-md-6'>\r\n                    <Card style={{marginBottom: '2rem'}}>\r\n                        <CardBody>\r\n                            <CardHeader className='text-center product-title'><a href='#'>{product.title}</a></CardHeader>\r\n                            <CardImg src={product.image} alt={product.description}></CardImg>\r\n                            <CardFooter>\r\n                                <p>{product.description}</p>\r\n                                <p>{formatCurrency(product.price)}</p>\r\n                            </CardFooter>\r\n                            <Button onClick={() => this.props.addToCart(product)} color='warning' style={{margin: '1rem'}}>\r\n                                Add To Cart\r\n                            </Button> \r\n                        </CardBody>\r\n                    </Card>\r\n                </div>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div className='container'>\r\n                <div className='row'>\r\n                    {productList}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","C:\\projects\\portfolio-react-shopping-cart\\src\\util.js",[],"C:\\projects\\portfolio-react-shopping-cart\\src\\components\\FilterComponent.js",[],"C:\\projects\\portfolio-react-shopping-cart\\src\\components\\CartComponent.js",["30","31"],{"ruleId":"32","severity":1,"message":"33","line":81,"column":18,"nodeType":"34","messageId":"35","endLine":81,"endColumn":31},{"ruleId":"36","severity":1,"message":"37","line":12,"column":79,"nodeType":"38","endLine":12,"endColumn":91},{"ruleId":"32","severity":1,"message":"39","line":2,"column":28,"nodeType":"34","messageId":"35","endLine":2,"endColumn":33},{"ruleId":"36","severity":1,"message":"37","line":16,"column":44,"nodeType":"38","endLine":16,"endColumn":56},"no-unused-vars","'alreadyInCart' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Image' is defined but never used."]